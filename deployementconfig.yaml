Resources:
  WeatherData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  WeatherServiceUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  WeatherServiceUserRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - WeatherData
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: WeatherServiceUserRoleDefaultPolicy
      Roles:
        - !Ref WeatherServiceUserRole

  WeatherLamdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: case-study-first-bucket 
        S3Key: WeatherDataAPP-0.0.1-SNAPSHOT.jar
      Environment:
        Variables:
          TABLE_NAME: !Ref WeatherData
      Handler: com.weather.data.StreamLambdaHandler
      MemorySize: 1024
      Role: !GetAtt 
        - WeatherServiceUserRole
        - Arn
      Runtime: java17
      Timeout: 30
    DependsOn:
      - WeatherServiceUserRoleDefaultPolicy
      - WeatherServiceUserRole

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17

  LambdaRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:DeleteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Effect: Allow
            Resource: !GetAtt 
              - WeatherData
              - Arn
        Version: 2012-10-17
      PolicyName: LambdaRoleDefaultPolicy
      Roles:
        - !Ref LambdaRole

  WeatherApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: This service serves weather data.
      Name: Weather Service

  WeatherApiDeployment026EB496003c16b50da7f9ac2db4d9cfa0ae5ddd:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: This service serves weather data.
      RestApiId: !Ref WeatherApi
    DependsOn:
      - WeatherApiweatherGETA7426538
      - WeatherApiweatherResource

  WeatherApiDeploymentStageprod:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref WeatherApiDeployment026EB496003c16b50da7f9ac2db4d9cfa0ae5ddd
      RestApiId: !Ref WeatherApi
      StageName: prod

  WeatherApiweatherResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - WeatherApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref WeatherApi

  WeatherApiweatherGETApiPermissionWeatherAppStackWeatherApi37B19730GETweatherC2343649:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - WeatherLamdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref WeatherApi
          - /
          - '*'
          - /
		  -'*'
		  -/
		  -'*'

  WeatherApiweatherGETApiPermissionTestWeatherAppStackWeatherApi37B19730GETweatherBEDBC174:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - WeatherLamdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref WeatherApi
          - /test-invoke-stage/GET/weather

  WeatherApiweatherGETA7426538:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - WeatherLamdaFunction
              - Arn
            - /invocations
      ResourceId: !Ref WeatherApiweatherResource
      RestApiId: !Ref WeatherApi

  WeatherEventBus9D15A0EF:
    Type: 'AWS::Events::EventBus'
    Properties:
      Name: WeatherEventBus

  WeatherRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - WeatherLamdaFunction
            - Arn
          Id: Target0

  WeatherRuleAllowEventRuleWeatherAppStackWeatherFunctionF2F56C77E7AAC8BE:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - WeatherLamdaFunction
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - WeatherRule
        - Arn

Outputs:
  WeatherApiEndpoint9062F38A:
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref WeatherApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Ref WeatherApiDeploymentStageprod
        - /
